{
    "batch_size": [32, 64],
    "learning_rate": [0.001, 0.01],
    "model_params": {
        "MLP": {
            "hidden_layers": [
                [8],
                [8, 16],
                [16, 8],
                [8, 16, 32],
                [32, 16, 8],
                [8, 16, 32, 16, 8],
                [32],
                [32, 64],
                [64, 32],
                [32, 64, 128],
                [128, 64, 32],
                [32, 64, 128, 64, 32]
            ]
        },
        "LSTM": {
            "layers": [1, 2, 4],
            "units": [32, 64, 128],
            "return_sequence": [true, false],
            "recurrent_dropout": [0, 0.2],
            "dense_dropout": [0, 0.2],
            "dense_layers": [
                [8],
                [8, 16],
                [16, 8],
                [8, 16, 32],
                [32, 16, 8],
                [8, 16, 32, 16, 8],
                [32, 64],
                [64, 32],
                [32, 64, 128],
                [128, 64, 32],
                [32, 64, 128, 64, 32]
            ]
        },
        "GRU": {
            "layers": [1, 2, 4],
            "units": [32, 64, 128],
            "return_sequence": [true, false],
            "recurrent_dropout": [0, 0.2, 0.4],
            "dense_dropout": [0, 0.2, 0.4],
            "dense_layers": [
                [8],
                [8, 16],
                [16, 8],
                [8, 16, 32],
                [32, 16, 8],
                [8, 16, 32, 16, 8],
                [32, 64],
                [64, 32],
                [32, 64, 128],
                [128, 64, 32],
                [32, 64, 128, 64, 32]
            ]
        },
        "CNN": {
            "conv_blocks": [
                [[16, 3, 2]],
                [[16, 5, 2], [16, 3, 2]],
                [[16, 7, 2], [16, 5, 2], [16, 2, 2]],
                [[16, 3, 0]],
                [[16, 5, 0], [16, 3, 0]],
                [[16, 7, 0], [16, 5, 0], [16, 2, 0]],
                [[32, 3, 2]],
                [[32, 5, 2], [32, 3, 2]],
                [[32, 7, 2], [32, 5, 2], [32, 2, 2]],
                [[32, 3, 0]],
                [[32, 5, 0], [32, 3, 0]],
                [[32, 7, 0], [32, 5, 0], [32, 2, 0]],
                [[64, 3, 2]],
                [[64, 5, 2], [64, 3, 2]],
                [[64, 7, 2], [64, 5, 2], [64, 2, 2]],
                [[64, 3, 0]],
                [[64, 5, 0], [64, 3, 0]],
                [[64, 7, 0], [64, 5, 0], [64, 2, 0]]
            ],
            "dense_dropout": [0, 0.2],
            "dense_layers": [
                [8],
                [8, 16],
                [16, 8],
                [8, 16, 32],
                [32, 16, 8],
                [8, 16, 32, 16, 8],
                [32, 64],
                [64, 32],
                [32, 64, 128],
                [128, 64, 32],
                [32, 64, 128, 64, 32]
            ]
        },
        "TCN": {
            "nb_stacks": [1, 3],
            "nb_filters": [32, 64],
            "dilations": [[1, 2, 4, 8], [1, 2, 4, 8, 16]],
            "kernel_size": [3, 6],
            "return_sequences": [true, false],
            "tcn_dropout": [0, 0.2],
            "dense_dropout": [0, 0.2],
            "dense_layers": [
                [8],
                [8, 16],
                [16, 8],
                [8, 16, 32],
                [32, 16, 8],
                [8, 16, 32, 16, 8],
                [32, 64],
                [64, 32],
                [32, 64, 128],
                [128, 64, 32],
                [32, 64, 128, 64, 32]
            ]
        },
        "XGBClassifier" : {
            "eta" : [0.1, 0.3, 0.6],
            "max_depth" : [2, 4, 6, 8, 10],
            "grow_policy" : ["depthwise", "lossguide"],
            "sampling_method": ["uniform", "gradient_based"]
        },
        "LinearSVC" : {
            "max_iter" : [500, 1000, 2000],
            "loss" : ["hinge", "squared_hinge"],
            "penalty" : ["l2"]
        },
        "AdaBoostClassifier" : {
            "n_estimators" : [25, 50, 100],
            "learning_rate" : [0.8, 0.9, 1.0]
        },
        "RandomForestClassifier" : {
            "n_jobs" : [-1],
            "n_estimators" : [100, 300, 600],
            "max_depth" : [2, 4, 6, 8, 10],
            "min_samples_split" : [2, 4, 6, 8],
            "min_samples_leaf": [1, 3, 5, 7]
        },
        "LogisticRegression" : {
            "n_jobs" : [-1],
            "penalty" : ["l2", "none"],
            "solver" : ["lbfgs", "sag", "saga"]
        }
    }
}